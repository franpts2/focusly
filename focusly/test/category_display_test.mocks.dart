// Mocks generated by Mockito 5.4.6 from annotations
// in focusly/test/category_display_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i5;

import 'package:focusly/model/flashcard_deck_model.dart' as _i3;
import 'package:focusly/model/quiz_model.dart' as _i7;
import 'package:focusly/viewmodel/flashcard_deck_viewmodel.dart' as _i2;
import 'package:focusly/viewmodel/quiz_viewmodel.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FlashcardDeckViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlashcardDeckViewModel extends _i1.Mock
    implements _i2.FlashcardDeckViewModel {
  MockFlashcardDeckViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.FlashcardDeck> get decks =>
      (super.noSuchMethod(
            Invocation.getter(#decks),
            returnValue: <_i3.FlashcardDeck>[],
          )
          as List<_i3.FlashcardDeck>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> addDeck(_i3.FlashcardDeck? deck) =>
      (super.noSuchMethod(
            Invocation.method(#addDeck, [deck]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateDeck(_i3.FlashcardDeck? deck) =>
      (super.noSuchMethod(
            Invocation.method(#updateDeck, [deck]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDeck(String? deckId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteDeck, [deckId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> refreshDecks() =>
      (super.noSuchMethod(
            Invocation.method(#refreshDecks, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [QuizViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuizViewModel extends _i1.Mock implements _i6.QuizViewModel {
  MockQuizViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i7.Quiz> get quizzes =>
      (super.noSuchMethod(
            Invocation.getter(#quizzes),
            returnValue: <_i7.Quiz>[],
          )
          as List<_i7.Quiz>);

  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);

  @override
  _i4.Future<void> addQuiz(_i7.Quiz? quiz) =>
      (super.noSuchMethod(
            Invocation.method(#addQuiz, [quiz]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> updateQuiz(_i7.Quiz? quiz) =>
      (super.noSuchMethod(
            Invocation.method(#updateQuiz, [quiz]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteQuiz(String? quizId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteQuiz, [quizId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> refreshQuizzes() =>
      (super.noSuchMethod(
            Invocation.method(#refreshQuizzes, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  void addListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#addListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeListener(_i5.VoidCallback? listener) => super.noSuchMethod(
    Invocation.method(#removeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );

  @override
  void notifyListeners() => super.noSuchMethod(
    Invocation.method(#notifyListeners, []),
    returnValueForMissingStub: null,
  );
}
